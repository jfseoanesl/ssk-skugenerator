package com.skugenerator;

import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import jakarta.annotation.PostConstruct;
import java.util.TimeZone;

/**
 * Clase principal de la aplicaci√≥n SKU Generator.
 *
 * Esta aplicaci√≥n proporciona un sistema completo para la generaci√≥n autom√°tica
 * de c√≥digos SKU de 12 d√≠gitos para productos de una tienda de ropa infantil.
 *
 * Funcionalidades principales:
 * - Generaci√≥n autom√°tica de c√≥digos SKU √∫nicos
 * - Gesti√≥n completa de productos y configuraciones
 * - Sistema de reportes y estad√≠sticas
 * - Control de acceso con autenticaci√≥n JWT
 * - Exportaci√≥n e importaci√≥n de datos
 * - Sistema de backup y restauraci√≥n
 *
 * @author SKU Generator Development Team
 * @version 1.0.0
 * @since 2024
 */
@Slf4j
@SpringBootApplication(
		scanBasePackages = "com.skugenerator"
)
@EnableJpaRepositories(
		basePackages = "com.skugenerator.repository"
)
@EnableJpaAuditing(
		auditorAwareRef = "auditingAwareProvider"
)
@EnableTransactionManagement
@EnableCaching
@EnableAsync
@EnableScheduling
@EnableConfigurationProperties
public class SkuGeneratorApplication {

	/**
	 * M√©todo principal para iniciar la aplicaci√≥n Spring Boot.
	 *
	 * @param args argumentos de l√≠nea de comandos
	 */
	public static void main(String[] args) {
		// Configurar propiedades del sistema antes de iniciar
		configureSystemProperties();

		// Iniciar la aplicaci√≥n
		SpringApplication app = new SpringApplication(SkuGeneratorApplication.class);

		// Configuraciones adicionales de la aplicaci√≥n
		configureApplication(app);

		// Ejecutar la aplicaci√≥n
		var context = app.run(args);

		// Log de informaci√≥n de inicio
		logApplicationStartup(context);
	}

	/**
	 * Configuraci√≥n inicial despu√©s de la construcci√≥n del bean.
	 * Se ejecuta una sola vez al inicializar la aplicaci√≥n.
	 */
	@PostConstruct
	public void init() {
		// Configurar zona horaria por defecto
		TimeZone.setDefault(TimeZone.getTimeZone("America/Bogota"));

		log.info("=".repeat(60));
		log.info("üß∏ SKU GENERATOR APPLICATION INITIALIZED");
		log.info("=".repeat(60));
		log.info("üìÖ Timezone configured: {}", TimeZone.getDefault().getID());
		log.info("‚òï Java version: {}", System.getProperty("java.version"));
		log.info("üöÄ Spring Boot version: {}", getClass().getPackage().getImplementationVersion());
		log.info("üíæ Available processors: {}", Runtime.getRuntime().availableProcessors());
		log.info("üß† Max memory: {} MB", Runtime.getRuntime().maxMemory() / 1024 / 1024);
		log.info("=".repeat(60));

		// Log de funcionalidades principales
		logMainFeatures();
	}

	/**
	 * Configura propiedades del sistema necesarias para la aplicaci√≥n.
	 */
	private static void configureSystemProperties() {
		// Configurar propiedades de red para mejor performance
		System.setProperty("java.net.preferIPv4Stack", "true");
		System.setProperty("java.awt.headless", "true");

		// Configurar propiedades de JPA/Hibernate
		System.setProperty("hibernate.types.print.banner", "false");

		// Configurar encoding por defecto
		System.setProperty("file.encoding", "UTF-8");

		log.debug("System properties configured successfully");
	}

	/**
	 * Configura la aplicaci√≥n Spring Boot con settings adicionales.
	 *
	 * @param app la instancia de SpringApplication
	 */
	private static void configureApplication(SpringApplication app) {
		// Configurar banner personalizado
		app.setBannerMode(org.springframework.boot.Banner.Mode.CONSOLE);

		// Configurar propiedades adicionales
		app.setRegisterShutdownHook(true);

		// Configurar listeners adicionales si es necesario
		// app.addListeners(new CustomApplicationListener());

		log.debug("SpringApplication configured successfully");
	}

	/**
	 * Log de informaci√≥n importante al iniciar la aplicaci√≥n.
	 *
	 * @param context el contexto de la aplicaci√≥n Spring
	 */
	private static void logApplicationStartup(org.springframework.context.ConfigurableApplicationContext context) {
		String serverPort = context.getEnvironment().getProperty("server.port", "8080");
		String contextPath = context.getEnvironment().getProperty("server.servlet.context-path", "");
		String activeProfiles = String.join(", ", context.getEnvironment().getActiveProfiles());

		log.info("");
		log.info("üéâ APPLICATION STARTED SUCCESSFULLY!");
		log.info("üåê Local URL: http://localhost:{}{}", serverPort, contextPath);
		log.info("üìä Swagger UI: http://localhost:{}{}/swagger-ui.html", serverPort, contextPath);
		log.info("‚ù§Ô∏è Actuator Health: http://localhost:{}{}/actuator/health", serverPort, contextPath);
		log.info("üè∑Ô∏è Active Profiles: {}", activeProfiles.isEmpty() ? "default" : activeProfiles);
		log.info("üìù Application Name: {}", context.getEnvironment().getProperty("spring.application.name", "SKU Generator"));
		log.info("");
	}

	/**
	 * Log de las funcionalidades principales de la aplicaci√≥n.
	 */
	private void logMainFeatures() {
		log.info("üîß MAIN FEATURES AVAILABLE:");
		log.info("  ‚úÖ Automatic SKU Code Generation (12-digit format)");
		log.info("  üë• User Management & JWT Authentication");
		log.info("  ‚öôÔ∏è Product Configuration Management");
		log.info("  üß∏ Complete Product CRUD Operations");
		log.info("  üìä Advanced Reports & Statistics");
		log.info("  üì§ Multi-format Export (CSV, Excel, JSON)");
		log.info("  üíæ Database Backup & Restoration");
		log.info("  üîç Advanced Search & Filtering");
		log.info("  üì± Responsive Web Interface");
		log.info("  üîí Role-based Access Control");
		log.info("=".repeat(60));
	}
}