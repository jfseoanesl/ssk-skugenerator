package com.skugenerator.config;

import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;
import io.swagger.v3.oas.models.servers.Server;
import io.swagger.v3.oas.models.tags.Tag;
import lombok.extern.slf4j.Slf4j;
import org.springdoc.core.models.GroupedOpenApi;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;

import java.util.Arrays;
import java.util.List;

/**
 * Configuraci√≥n de Swagger/OpenAPI para la documentaci√≥n de la API REST.
 *
 * Esta clase configura la documentaci√≥n autom√°tica de la API incluyendo:
 * - Informaci√≥n general de la API
 * - Esquemas de autenticaci√≥n (JWT)
 * - Agrupaci√≥n de endpoints por funcionalidad
 * - Configuraci√≥n de servidores
 * - Tags y categorizaci√≥n
 *
 * @author SKU Generator Development Team
 * @version 1.0.0
 * @since 2024
 */
@Slf4j
@Configuration
@Profile("!prod") // No habilitar en producci√≥n por seguridad
public class SwaggerConfig {

    // ===================================================================
    // PROPIEDADES DE CONFIGURACI√ìN
    // ===================================================================

    @Value("${spring.application.name:SKU Generator}")
    private String applicationName;

    @Value("${app.name:SKU Generator}")
    private String appName;

    @Value("${app.description:Sistema de Generaci√≥n de C√≥digos SKU para Tienda de Ropa Infantil}")
    private String appDescription;

    @Value("${app.version:1.0.0}")
    private String appVersion;

    @Value("${app.contact.name:Development Team}")
    private String contactName;

    @Value("${app.contact.email:dev@empresa.com}")
    private String contactEmail;

    @Value("${app.contact.url:https://empresa.com}")
    private String contactUrl;

    @Value("${server.port:8080}")
    private int serverPort;

    @Value("${server.servlet.context-path:}")
    private String contextPath;

    // ===================================================================
    // CONFIGURACI√ìN PRINCIPAL DE OPENAPI
    // ===================================================================

    /**
     * Configuraci√≥n principal de OpenAPI con informaci√≥n completa de la API.
     *
     * @return configuraci√≥n de OpenAPI
     */
    @Bean
    public OpenAPI customOpenAPI() {
        log.info("Configurando OpenAPI/Swagger para documentaci√≥n de API");

        return new OpenAPI()
                .info(apiInfo())
                .servers(apiServers())
                .components(securityComponents())
                .security(securityRequirements())
                .tags(apiTags());
    }

    /**
     * Informaci√≥n general de la API.
     *
     * @return informaci√≥n de la API
     */
    private Info apiInfo() {
        return new Info()
                .title(appName + " - API Documentation")
                .description(buildApiDescription())
                .version(appVersion)
                .contact(apiContact())
                .license(apiLicense())
                .termsOfService("https://empresa.com/terms");
    }

    /**
     * Informaci√≥n de contacto para la API.
     *
     * @return contacto de la API
     */
    private Contact apiContact() {
        return new Contact()
                .name(contactName)
                .email(contactEmail)
                .url(contactUrl);
    }

    /**
     * Informaci√≥n de licencia de la API.
     *
     * @return licencia de la API
     */
    private License apiLicense() {
        return new License()
                .name("MIT License")
                .url("https://opensource.org/licenses/MIT");
    }

    /**
     * Configuraci√≥n de servidores de la API.
     *
     * @return lista de servidores
     */
    private List<Server> apiServers() {
        String baseUrl = "http://localhost:" + serverPort + contextPath;

        Server localServer = new Server()
                .url(baseUrl)
                .description("Servidor de Desarrollo Local");

        Server dockerServer = new Server()
                .url("http://localhost:8080" + contextPath)
                .description("Servidor Docker Local");

        return Arrays.asList(localServer, dockerServer);
    }

    /**
     * Construir descripci√≥n detallada de la API.
     *
     * @return descripci√≥n de la API
     */
    private String buildApiDescription() {
        return """
                ## üß∏ SKU Generator API
                
                API REST completa para el sistema de generaci√≥n de c√≥digos SKU de productos para tienda de ropa infantil.
                
                ### üöÄ Funcionalidades Principales:
                
                - **üè∑Ô∏è Generaci√≥n de C√≥digos SKU**: C√≥digos √∫nicos de 12 d√≠gitos con estructura espec√≠fica
                - **üß∏ Gesti√≥n de Productos**: CRUD completo con validaciones de negocio
                - **‚öôÔ∏è Configuraci√≥n de Cat√°logos**: Administraci√≥n de tipos, categor√≠as, tallas, colores y temporadas
                - **üìä Reportes y Estad√≠sticas**: An√°lisis detallados y m√©tricas en tiempo real
                - **üë• Gesti√≥n de Usuarios**: Control de acceso con roles y permisos
                - **üì§ Importaci√≥n/Exportaci√≥n**: M√∫ltiples formatos (CSV, Excel, JSON)
                - **üíæ Backup y Restauraci√≥n**: Gesti√≥n segura de datos
                
                ### üîê Autenticaci√≥n:
                
                La API utiliza autenticaci√≥n JWT (JSON Web Tokens). Para acceder a los endpoints protegidos:
                
                1. Realizar login en `/api/auth/login` con credenciales v√°lidas
                2. Usar el token JWT en el header `Authorization: Bearer <token>`
                3. El token expira en 24 horas (configurable)
                
                ### üìã Estructura del C√≥digo SKU:
                
                ```
                T CC S TT CC S ###
                ‚îÇ ‚îÇ  ‚îÇ ‚îÇ  ‚îÇ  ‚îÇ ‚îî‚îÄ‚îÄ Consecutivo (3 d√≠gitos)
                ‚îÇ ‚îÇ  ‚îÇ ‚îÇ  ‚îÇ  ‚îî‚îÄ‚îÄ Temporada (1 d√≠gito)
                ‚îÇ ‚îÇ  ‚îÇ ‚îÇ  ‚îî‚îÄ‚îÄ Color (2 d√≠gitos)
                ‚îÇ ‚îÇ  ‚îÇ ‚îî‚îÄ‚îÄ Talla (2 d√≠gitos)
                ‚îÇ ‚îÇ  ‚îî‚îÄ‚îÄ Subcategor√≠a (1 d√≠gito)
                ‚îÇ ‚îî‚îÄ‚îÄ Categor√≠a (2 d√≠gitos)
                ‚îî‚îÄ‚îÄ Tipo de Producto (1 d√≠gito)
                ```
                
                ### üéØ Roles de Usuario:
                
                - **ADMIN**: Acceso total al sistema
                - **USER**: Gesti√≥n de productos y reportes
                - **VIEWER**: Solo lectura
                
                ### üìß Soporte:
                
                Para soporte t√©cnico, contactar a: """ + contactEmail;
    }

    // ===================================================================
    // CONFIGURACI√ìN DE SEGURIDAD
    // ===================================================================

    /**
     * Componentes de seguridad para JWT.
     *
     * @return componentes de seguridad
     */
    private Components securityComponents() {
        return new Components()
                .addSecuritySchemes("bearerAuth", jwtSecurityScheme())
                .addSecuritySchemes("apiKey", apiKeySecurityScheme());
    }

    /**
     * Esquema de seguridad JWT.
     *
     * @return esquema de seguridad JWT
     */
    private SecurityScheme jwtSecurityScheme() {
        return new SecurityScheme()
                .type(SecurityScheme.Type.HTTP)
                .scheme("bearer")
                .bearerFormat("JWT")
                .description("Token JWT obtenido del endpoint de login. Formato: Bearer <token>");
    }

    /**
     * Esquema de seguridad con API Key (para uso futuro).
     *
     * @return esquema de seguridad API Key
     */
    private SecurityScheme apiKeySecurityScheme() {
        return new SecurityScheme()
                .type(SecurityScheme.Type.APIKEY)
                .in(SecurityScheme.In.HEADER)
                .name("X-API-Key")
                .description("API Key para acceso program√°tico");
    }

    /**
     * Requerimientos de seguridad para los endpoints.
     *
     * @return lista de requerimientos de seguridad
     */
    private List<SecurityRequirement> securityRequirements() {
        SecurityRequirement bearerAuthRequirement = new SecurityRequirement().addList("bearerAuth");
        return Arrays.asList(bearerAuthRequirement);
    }

    // ===================================================================
    // CONFIGURACI√ìN DE TAGS
    // ===================================================================

    /**
     * Tags para categorizar los endpoints de la API.
     *
     * @return lista de tags
     */
    private List<Tag> apiTags() {
        return Arrays.asList(
                new Tag().name("üîê Autenticaci√≥n")
                        .description("Endpoints para login, logout y gesti√≥n de tokens JWT"),

                new Tag().name("üß∏ Productos")
                        .description("CRUD completo de productos y generaci√≥n de c√≥digos SKU"),

                new Tag().name("‚öôÔ∏è Configuraciones")
                        .description("Gesti√≥n de cat√°logos: tipos, categor√≠as, tallas, colores y temporadas"),

                new Tag().name("üë• Usuarios")
                        .description("Gesti√≥n de usuarios, roles y permisos"),

                new Tag().name("üìä Reportes")
                        .description("Estad√≠sticas, an√°lisis y reportes detallados"),

                new Tag().name("üì§ Exportaci√≥n")
                        .description("Exportaci√≥n e importaci√≥n de datos en m√∫ltiples formatos"),

                new Tag().name("üíæ Base de Datos")
                        .description("Gesti√≥n de backup, restauraci√≥n y consultas SQL"),

                new Tag().name("üîß Sistema")
                        .description("Endpoints de salud, m√©tricas y administraci√≥n")
        );
    }

    // ===================================================================
    // CONFIGURACI√ìN DE GRUPOS DE API
    // ===================================================================

    /**
     * Grupo de API para endpoints de autenticaci√≥n.
     *
     * @return grupo de API de autenticaci√≥n
     */
    @Bean
    public GroupedOpenApi authenticationApi() {
        return GroupedOpenApi.builder()
                .group("01-authentication")
                .displayName("üîê Autenticaci√≥n")
                .pathsToMatch("/api/auth/**")
                .build();
    }

    /**
     * Grupo de API para endpoints de productos.
     *
     * @return grupo de API de productos
     */
    @Bean
    public GroupedOpenApi productsApi() {
        return GroupedOpenApi.builder()
                .group("02-products")
                .displayName("üß∏ Productos")
                .pathsToMatch("/api/products/**")
                .build();
    }

    /**
     * Grupo de API para endpoints de configuraci√≥n.
     *
     * @return grupo de API de configuraci√≥n
     */
    @Bean
    public GroupedOpenApi configurationApi() {
        return GroupedOpenApi.builder()
                .group("03-configuration")
                .displayName("‚öôÔ∏è Configuraciones")
                .pathsToMatch("/api/config/**")
                .build();
    }

    /**
     * Grupo de API para endpoints de usuarios.
     *
     * @return grupo de API de usuarios
     */
    @Bean
    public GroupedOpenApi usersApi() {
        return GroupedOpenApi.builder()
                .group("04-users")
                .displayName("üë• Usuarios")
                .pathsToMatch("/api/users/**")
                .build();
    }

    /**
     * Grupo de API para endpoints de reportes.
     *
     * @return grupo de API de reportes
     */
    @Bean
    public GroupedOpenApi reportsApi() {
        return GroupedOpenApi.builder()
                .group("05-reports")
                .displayName("üìä Reportes")
                .pathsToMatch("/api/reports/**")
                .build();
    }

    /**
     * Grupo de API para endpoints de exportaci√≥n.
     *
     * @return grupo de API de exportaci√≥n
     */
    @Bean
    public GroupedOpenApi exportApi() {
        return GroupedOpenApi.builder()
                .group("06-export")
                .displayName("üì§ Exportaci√≥n")
                .pathsToMatch("/api/export/**", "/api/import/**")
                .build();
    }

    /**
     * Grupo de API para endpoints de base de datos.
     *
     * @return grupo de API de base de datos
     */
    @Bean
    public GroupedOpenApi databaseApi() {
        return GroupedOpenApi.builder()
                .group("07-database")
                .displayName("üíæ Base de Datos")
                .pathsToMatch("/api/database/**", "/api/backup/**")
                .build();
    }

    /**
     * Grupo de API para endpoints del sistema y monitoreo.
     *
     * @return grupo de API del sistema
     */
    @Bean
    public GroupedOpenApi systemApi() {
        return GroupedOpenApi.builder()
                .group("08-system")
                .displayName("üîß Sistema")
                .pathsToMatch("/actuator/**")
                .build();
    }

    /**
     * Grupo de API completa (todos los endpoints).
     *
     * @return grupo de API completa
     */
    @Bean
    public GroupedOpenApi allApi() {
        return GroupedOpenApi.builder()
                .group("00-all")
                .displayName("üìã API Completa")
                .pathsToMatch("/api/**", "/actuator/**")
                .build();
    }

    // ===================================================================
    // CONFIGURACI√ìN POST-CONSTRUCT
    // ===================================================================

    /**
     * Inicializaci√≥n post-construcci√≥n para logging de configuraci√≥n.
     */
    @jakarta.annotation.PostConstruct
    public void logSwaggerConfiguration() {
        log.info("=".repeat(50));
        log.info("üìö SWAGGER/OPENAPI CONFIGURATION INITIALIZED");
        log.info("=".repeat(50));
        log.info("üìñ Application: {} v{}", appName, appVersion);
        log.info("üåê Swagger UI: http://localhost:{}{}/swagger-ui.html", serverPort, contextPath);
        log.info("üìã API Docs: http://localhost:{}{}/api-docs", serverPort, contextPath);
        log.info("üîê Security: JWT Bearer Token");
        log.info("üë• Contact: {} ({})", contactName, contactEmail);
        log.info("üìÑ License: MIT License");
        log.info("üè∑Ô∏è  Tags: 8 categor√≠as de endpoints");
        log.info("üì¶ Groups: 9 grupos de API configurados");
        log.info("=".repeat(50));
    }
}